#include <iostream>
#include <string>

using namespace std;

struct Buku
{
    string genre;
    string judul;
    string pengarang;
    int tahun;

    void display() const
    {
        cout << "=====" << endl;
        cout << "Genre: " << genre << endl;
        cout << "Judul: " << judul << endl;
        cout << "Pengarang: " << pengarang << endl;
        cout << "Tahun: " << tahun << endl;
    }
};

template <class T>
struct TreeNode
{
    T data;
    TreeNode<T> *left, *right;

    TreeNode(const T &item) : data(item), left(nullptr), right(nullptr) {}
};

template <class T>
class BinaryTree
{
private:
    TreeNode<T> *root;

protected:
    virtual TreeNode<T> *insert(TreeNode<T> *node, const T &item)
    {
        if (!node)
        {
            return new TreeNode<T>(item);
        }

        if (item.judul < node->data.judul)
        {
            node->left = insert(node->left, item);
        }
        else if (item.judul > node->data.judul)
        {
            node->right = insert(node->right, item);
        }

        return node;
    }

    virtual bool search(TreeNode<T> *node, const string &judul) const
    {
        if (!node)
        {
            return false;
        }

        if (judul == node->data.judul)
        {
            node->data.display();
            return true;
        }
        else if (judul < node->data.judul)
        {
            return search(node->left, judul);
        }
        else
        {
            return search(node->right, judul);
        }
    }

    virtual TreeNode<T> *deleteNode(TreeNode<T> *node, const string &judul)
    {
        if (!node)
        {
            return nullptr;
        }

        if (judul < node->data.judul)
        {
            node->left = deleteNode(node->left, judul);
        }
        else if (judul > node->data.judul)
        {
            node->right = deleteNode(node->right, judul);
        }
        else
        {
            if (!node->left)
            {
                TreeNode<T> *temp = node->right;
                delete node;
                return temp;
            }
            else if (!node->right)
            {
                TreeNode<T> *temp = node->left;
                delete node;
                return temp;
            }

            TreeNode<T> *temp = findMin(node->right);
            node->data = temp->data;
            node->right = deleteNode(node->right, temp->data.judul);
        }

        return node;
    }

    virtual TreeNode<T> *findMin(TreeNode<T> *node)
    {
        while (node->left)
        {
            node = node->left;
        }
        return node;
    }

    virtual void inorderTraversal(TreeNode<T> *node) const
    {
        if (node)
        {
            inorderTraversal(node->left);
            node->data.display();
            inorderTraversal(node->right);
        }
    }

public:
    BinaryTree() : root(nullptr) {}

    void insert(const T &item)
    {
        root = insert(root, item);
    }

    bool search(const string &judul) const
    {
        return search(root, judul);
    }

    void deleteNode(const string &judul)
    {
        root = deleteNode(root, judul);
    }

    void displayAll() const
    {
        if (!root)
        {
            cout << "Tidak ada data buku yang tersimpan." << endl;
            return;
        }

        inorderTraversal(root);
    }
};

class AVLTree : public BinaryTree<Buku>
{
    // Additional AVL-specific functions or modifications can be added here if needed.
};

int main()
{
    AVLTree avlTree;
    BinaryTree<Buku> binarySearchTree;
    Buku temp;

    while (true)
    {
        cout << "Menu:\n";
        cout << "===========================================\n";
        cout << "1. Tambah Data Buku (AVL)\n";
        cout << "2. Cari Data Buku   (AVL)\n";
        cout << "3. Hapus Data Buku  (AVL)\n";
        cout << "===========================================\n";
        cout << "4. Tambah Data Buku (BST)\n";
        cout << "5. Cari Data Buku   (BST)\n";
        cout << "6. Hapus Data Buku  (BST)\n";
        cout << "===========================================\n";
        cout << "7. Tampilkan Semua Data Buku (AVL)\n";
        cout << "8. Tampilkan Semua Data Buku (BST)\n";
        cout << "===========================================\n";
        cout << "9. Keluar\n";
        cout << "Pilih menu (1-9): ";

        int menu;
        cin >> menu;
        cin.ignore();

        switch (menu)
        {
        case 1:
            cout << "======= \n";
            cout << "Genre: ";
            getline(cin, temp.genre);
            cout << "Judul: ";
            getline(cin, temp.judul);
            cout << "Pengarang: ";
            getline(cin, temp.pengarang);
            cout << "Tahun: ";
            cin >> temp.tahun;
            avlTree.insert(temp);
            cin.ignore();
            break;

        case 2:
            cout << "Judul: ";
            getline(cin, temp.judul);
            if (!avlTree.search(temp.judul))
            {
                cout << "Buku dengan judul tersebut tidak ditemukan.\n";
            }
            break;

        case 3:
            cout << "Judul: ";
            getline(cin, temp.judul);
            avlTree.deleteNode(temp.judul);
            break;

        case 4:
            cout << "======= \n";
            cout << "Genre: ";
            getline(cin, temp.genre);
            cout << "Judul: ";
            getline(cin, temp.judul);
            cout << "Pengarang: ";
            getline(cin, temp.pengarang);
            cout << "Tahun: ";
            cin >> temp.tahun;
            binarySearchTree.insert(temp);
            cin.ignore();
            break;

        case 5:
            cout << "Judul: ";
            getline(cin, temp.judul);
            if (!binarySearchTree.search(temp.judul))
            {
                cout << "Buku dengan judul tersebut tidak ditemukan.\n";
            }
            break;

        case 6:
            cout << "Judul: ";
            getline(cin, temp.judul);
            binarySearchTree.deleteNode(temp.judul);
            break;

        case 7:
            avlTree.displayAll();
            break;

        case 8:
            binarySearchTree.displayAll();
            break;

        case 9:
            return 0;

        default:
            cout << "Pilihan tidak valid. Silakan masukkan angka 1-9.\n";
        }
    }

    return 0;
}
